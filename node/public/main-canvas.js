"use strict";

var canvas;
var gl;
var program;

var proMatrixLoc;
var mdMatrixLoc;
var bgMatrixLoc;

var invCameraPosition = vec3(0.0, 0.0, -10.0);
var cameraTheta = 0.0;
var cameraFai = 0.0

var proMatrix = mat4();
var mdMatrix = mat4();
var bgMatrix = mat4();

var vertices_num = 0;


var roll_speed = 0.0;
var roll_const = 0.0;


var camera_degree = 60.0;


var lightPosition = vec4(5.0, 5.0, 20.0, 0.0 );
var lightAmbient = vec4(0.2, 0.2, 0.2, 1.0 );
var lightDiffuse = vec4( 1.0, 1.0, 1.0, 1.0 );
var lightSpecular = vec4( 1.0, 1.0, 1.0, 1.0 );

var materialAmbient = vec4( 1.0, 0.7, 0.0, 1.0 );
var materialDiffuse = vec4( 1.0, 0.7, 0.0, 1.0);
var materialSpecular = vec4( 0.4, 0.3, 0.0, 1.0 );
var materialShininess = 2.0;

var ambientProduct;
var diffuseProduct;
var specularProduct;

function configureTexture(image) {
    var texture = gl.createTexture();
    gl.activeTexture( gl.TEXTURE0 );
    gl.bindTexture( gl.TEXTURE_2D, texture );
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize, texSize, 0,
        gl.RGBA, gl.UNSIGNED_BYTE, image);
    gl.generateMipmap( gl.TEXTURE_2D );
    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER,
        gl.NEAREST_MIPMAP_LINEAR );
    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
}

window.onload = function init(){
    canvas = document.getElementById( "gl-canvas" );

    gl = WebGLUtils.setupWebGL( canvas );
    if ( !gl ) { alert( "WebGL isn't available" ); }

    //
    //  Configure WebGL
    //
    gl.viewport( 0, 0, canvas.width, canvas.height );
    gl.clearColor(0.7, 0.7, 1.0, 1.0); 

    gl.enable(gl.DEPTH_TEST);

    //  Load shaders and initialize attribute buffers
    program = initShaders( gl, "vertex-shader", "fragment-shader" );
    gl.useProgram( program );


    var srcvs = [];
/*
    srcvs.push(vec3(-1.0, -1.0, -1.0));
    srcvs.push(vec3(0.0, 1.0, 0.0));
    srcvs.push(vec3(1.0, 0.0, 0.0));
*/
srcvs.push(vec3(0.49986580, -0.60223430, -0.00780914));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(0.04242134, 1.47826600, -0.30204144));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.32752311, -1.91220116, -0.64527416));
srcvs.push(vec3(0.01901290, -1.71030116, -0.38433679));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.79341298, -1.27312517, -0.71070319));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.76251202, -1.36721563, -0.68513500));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.79341298, -1.27312517, -0.71070319));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.75732559, -1.36108195, -0.68948614));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.75732559, -1.36108195, -0.68948614));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.79341298, -1.27312517, -0.71070319));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.79341298, -1.27312517, -0.71070319));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.76251202, -1.36721563, -0.68513500));
srcvs.push(vec3(-0.76251202, -1.36721563, -0.68513500));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.75732559, -1.36108195, -0.68948614));
srcvs.push(vec3(-0.76251202, -1.36721563, -0.68513500));
srcvs.push(vec3(-0.75732559, -1.36108195, -0.68948614));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.76251202, -1.36721563, -0.68513500));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.73320180, -1.38029956, -0.66892671));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.64066517, -2.06263852, -0.27531105));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.75732559, -1.36108195, -0.68948614));
srcvs.push(vec3(-0.79341298, -1.27312517, -0.71070319));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.79341298, -1.27312517, -0.71070319));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.85432237, -0.27262651, -0.62578809));
srcvs.push(vec3(-0.98236793, -0.65795451, -1.09911620));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-1.11301767, -1.24734413, -0.94213753));
srcvs.push(vec3(-1.13989865, -1.54223859, -1.27369701));
srcvs.push(vec3(-1.10317695, -1.82914161, -0.55619901));
srcvs.push(vec3(-0.97066074, -1.79128432, -1.09561550));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(-0.32752311, -1.91220116, -0.64527416));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.97066074, -1.79128432, -1.09561550));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.98236793, -0.65795451, -1.09911620));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.91908896, -0.99343717, -1.84139299));
srcvs.push(vec3(-0.87095183, -1.34713232, -1.75541293));
srcvs.push(vec3(-1.13989865, -1.54223859, -1.27369701));
srcvs.push(vec3(-1.11301767, -1.24734413, -0.94213753));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(-0.85663342, -1.88026869, -1.72510278));
srcvs.push(vec3(-1.13989865, -1.54223859, -1.27369701));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.01635427, -2.11142563, -1.65324878));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(0.00140146, 0.19727355, -1.76153409));
srcvs.push(vec3(0.45558565, -0.25348824, -2.16553926));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(0.03426686, -1.95561516, -2.17714095));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(0.03426686, -1.95561516, -2.17714095));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.02176649, -1.87428796, -2.43080377));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(-0.02176649, -1.87428796, -2.43080377));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.23059639, -1.78871238, -2.33957409));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.15239620, -1.59134256, -2.42654562));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.01212646, -1.61394071, -2.43720722));
srcvs.push(vec3(-0.02176649, -1.87428796, -2.43080377));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.02176649, -1.87428796, -2.43080377));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.02176649, -1.87428796, -2.43080377));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.08173031, -1.79433620, -2.41721892));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.19071498, -1.71068334, -2.40196061));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.31540840, -1.74686861, -2.38454341));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.20650948, -1.46159744, -2.51361799));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.20650948, -1.46159744, -2.51361799));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.20650948, -1.46159744, -2.51361799));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.22458230, -1.66241848, -2.44992828));
srcvs.push(vec3(-0.20650948, -1.46159744, -2.51361799));
srcvs.push(vec3(-0.18801975, -1.52213752, -2.46154642));
srcvs.push(vec3(-0.30270737, -1.69870495, -2.47772646));
srcvs.push(vec3(0.09401644, -1.45246720, -2.53087830));
srcvs.push(vec3(-0.20650948, -1.46159744, -2.51361799));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(-0.20650948, -1.46159744, -2.51361799));
srcvs.push(vec3(0.09401644, -1.45246720, -2.53087830));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(0.11018867, -1.43558776, -2.57716822));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(0.11016959, -1.43537235, -2.57727408));
srcvs.push(vec3(0.11016959, -1.43537235, -2.57727408));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(0.11016343, -1.43528735, -2.57731008));
srcvs.push(vec3(0.11016343, -1.43528735, -2.57731008));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(0.11016343, -1.43528735, -2.57731008));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(0.11018867, -1.43558776, -2.57716822));
srcvs.push(vec3(0.09401644, -1.45246720, -2.53087830));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(0.11018867, -1.43558776, -2.57716822));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(0.09401644, -1.45246720, -2.53087830));
srcvs.push(vec3(0.11018867, -1.43558776, -2.57716822));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.29791843, 0.24909795, -1.77925229));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(0.79789125, 0.11514516, 0.02471446));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(-0.69944590, 0.42840051, 0.86066228));
srcvs.push(vec3(-0.97058123, 0.60075593, 0.79372501));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(-0.28990608, -1.52594280, -2.45523214));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(0.17722983, -1.46360552, -2.48250627));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(-0.03192937, -1.38569676, -2.49163556));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.98678660, -0.64510232, -1.04427492));
srcvs.push(vec3(0.91196298, -0.92513513, -1.84269225));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(-1.02498126, 0.71546918, -0.40289181));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-0.83233106, 0.10947831, -0.94197136));
srcvs.push(vec3(-0.85432237, -0.27262651, -0.62578809));
srcvs.push(vec3(-0.82006460, -0.26778477, -0.15290530));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.01635427, -2.11142563, -1.65324878));
srcvs.push(vec3(0.84333318, -1.86380708, -1.85805022));
srcvs.push(vec3(0.92408955, -1.31708645, -1.62585842));
srcvs.push(vec3(1.25710606, -1.50958216, -0.83008992));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(-0.82006460, -0.26778477, -0.15290530));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(0.59617120, -2.12005376, -1.47073066));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(0.01901290, -1.71030116, -0.38433679));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(-0.03228504, -0.38848802, 0.51590317));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.28312057, 1.01872587, 1.51108205));
srcvs.push(vec3(0.36002349, 0.70711100, 1.02795469));
srcvs.push(vec3(-0.05697726, 1.04900431, 0.94998800));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.79789125, 0.11514516, 0.02471446));
srcvs.push(vec3(0.72088253, -0.90636342, -2.25152778));
srcvs.push(vec3(0.45558565, -0.25348824, -2.16553926));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.40212389, -0.78443038, -2.43019199));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(0.45558565, -0.25348824, -2.16553926));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(0.59617120, -2.12005376, -1.47073066));
srcvs.push(vec3(0.98892307, -1.78764653, -1.07957673));
srcvs.push(vec3(0.83145070, 0.09753659, -0.99039363));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.98678660, -0.64510232, -1.04427492));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-1.02498126, 0.71546918, -0.40289181));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(-0.41741791, 1.10186159, -0.85487222));
srcvs.push(vec3(0.04242134, 1.47826600, -0.30204144));
srcvs.push(vec3(-0.83233106, 0.10947831, -0.94197136));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.98236793, -0.65795451, -1.09911620));
srcvs.push(vec3(-0.83233106, 0.10947831, -0.94197136));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.01635427, -2.11142563, -1.65324878));
srcvs.push(vec3(0.59617120, -2.12005376, -1.47073066));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(0.69915956, -1.44884991, -2.23491549));
srcvs.push(vec3(0.84333318, -1.86380708, -1.85805022));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-0.82006460, -0.26778477, -0.15290530));
srcvs.push(vec3(-0.85432237, -0.27262651, -0.62578809));
srcvs.push(vec3(0.45558565, -0.25348824, -2.16553926));
srcvs.push(vec3(0.40893027, 0.41416430, -1.54908955));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.40893027, 0.41416430, -1.54908955));
srcvs.push(vec3(0.45558565, -0.25348824, -2.16553926));
srcvs.push(vec3(0.00140146, 0.19727355, -1.76153409));
srcvs.push(vec3(-0.62744289, -1.02955842, 0.14274758));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-0.59554374, -1.85461258, 0.16984459));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(-0.22010368, -1.08901453, -0.06284637));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.73337948, -0.93896925, -2.23115015));
srcvs.push(vec3(-0.91908896, -0.99343717, -1.84139299));
srcvs.push(vec3(-0.40941765, -1.95035767, 0.05087828));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.22010368, -1.08901453, -0.06284637));
srcvs.push(vec3(-0.03228504, -0.38848802, 0.51590317));
srcvs.push(vec3(-0.51201182, -0.35609972, 0.22819194));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.29748046, -1.24175548, 0.28712138));
srcvs.push(vec3(-0.62744289, -1.02955842, 0.14274758));
srcvs.push(vec3(-0.50596475, -1.65785360, 0.35107004));
srcvs.push(vec3(-1.13989865, -1.54223859, -1.27369701));
srcvs.push(vec3(-0.97066074, -1.79128432, -1.09561550));
srcvs.push(vec3(-1.10317695, -1.82914161, -0.55619901));
srcvs.push(vec3(-1.13989865, -1.54223859, -1.27369701));
srcvs.push(vec3(-0.85663342, -1.88026869, -1.72510278));
srcvs.push(vec3(-0.97066074, -1.79128432, -1.09561550));
srcvs.push(vec3(-0.05697726, 1.04900431, 0.94998800));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(0.45172160, 0.96262621, 0.55725288));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.04242134, 1.47826600, -0.30204144));
srcvs.push(vec3(0.59617120, -2.12005376, -1.47073066));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(0.84333318, -1.86380708, -1.85805022));
srcvs.push(vec3(0.59617120, -2.12005376, -1.47073066));
srcvs.push(vec3(0.84333318, -1.86380708, -1.85805022));
srcvs.push(vec3(0.98892307, -1.78764653, -1.07957673));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.40893027, 0.41416430, -1.54908955));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.83145070, 0.09753659, -0.99039363));
srcvs.push(vec3(0.98678660, -0.64510232, -1.04427492));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(-1.10154914, 0.52438116, -0.22028833));
srcvs.push(vec3(-0.85432237, -0.27262651, -0.62578809));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(-0.97066074, -1.79128432, -1.09561550));
srcvs.push(vec3(-0.85663342, -1.88026869, -1.72510278));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(0.83145070, 0.09753659, -0.99039363));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(-0.85432237, -0.27262651, -0.62578809));
srcvs.push(vec3(-0.83233106, 0.10947831, -0.94197136));
srcvs.push(vec3(-0.98236793, -0.65795451, -1.09911620));
srcvs.push(vec3(-0.83233106, 0.10947831, -0.94197136));
srcvs.push(vec3(-0.85432237, -0.27262651, -0.62578809));
srcvs.push(vec3(-1.10154914, 0.52438116, -0.22028833));
srcvs.push(vec3(-0.70818859, 0.40634876, 1.15907573));
srcvs.push(vec3(-0.74303644, 0.56439000, 1.43410301));
srcvs.push(vec3(-0.97058123, 0.60075593, 0.79372501));
srcvs.push(vec3(-0.03088078, 0.56870883, 1.53679585));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(0.36002349, 0.70711100, 1.02795469));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(1.11480116, -1.91482138, -0.14676043));
srcvs.push(vec3(0.77892833, -1.28651332, -0.63426119));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(-0.91908896, -0.99343717, -1.84139299));
srcvs.push(vec3(-0.87095183, -1.34713232, -1.75541293));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.91908896, -0.99343717, -1.84139299));
srcvs.push(vec3(-0.73337948, -0.93896925, -2.23115015));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(0.77892833, -1.28651332, -0.63426119));
srcvs.push(vec3(1.37674760, -1.76337337, -0.22236551));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(0.98892307, -1.78764653, -1.07957673));
srcvs.push(vec3(1.23801815, -2.14796352, -0.14401727));
srcvs.push(vec3(-0.41741791, 1.10186159, -0.85487222));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-0.39419397, 1.45651900, -0.28310892));
srcvs.push(vec3(0.04242134, 1.47826600, -0.30204144));
srcvs.push(vec3(-0.28352692, 1.49419546, 0.30139166));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(-0.29388520, 0.04746069, 1.26545810));
srcvs.push(vec3(-0.51201182, -0.35609972, 0.22819194));
srcvs.push(vec3(-0.03228504, -0.38848802, 0.51590317));
srcvs.push(vec3(-0.24862897, -0.29488694, 1.00674784));
srcvs.push(vec3(0.92408955, -1.31708645, -1.62585842));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(1.25710606, -1.50958216, -0.83008992));
srcvs.push(vec3(1.37674760, -1.76337337, -0.22236551));
srcvs.push(vec3(1.25710606, -1.50958216, -0.83008992));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.31417664, 0.63615524, -1.03920853));
srcvs.push(vec3(0.00140146, 0.19727355, -1.76153409));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-0.29791843, 0.24909795, -1.77925229));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(0.98892307, -1.78764653, -1.07957673));
srcvs.push(vec3(0.84333318, -1.86380708, -1.85805022));
srcvs.push(vec3(1.25710606, -1.50958216, -0.83008992));
srcvs.push(vec3(0.98892307, -1.78764653, -1.07957673));
srcvs.push(vec3(1.25710606, -1.50958216, -0.83008992));
srcvs.push(vec3(1.53534877, -2.01891231, -0.04051253));
srcvs.push(vec3(-0.97066074, -1.79128432, -1.09561550));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(-1.10317695, -1.82914161, -0.55619901));
srcvs.push(vec3(-0.64066517, -2.06263852, -0.27531105));
srcvs.push(vec3(-0.62334919, -2.00304603, 0.16331304));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.39419397, 1.45651900, -0.28310892));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.95298177, 1.18105065, 0.03804242));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(0.77892833, -1.28651332, -0.63426119));
srcvs.push(vec3(0.66695177, -1.00328958, 0.10121630));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.49986580, -0.60223430, -0.00780914));
srcvs.push(vec3(-0.05697726, 1.04900431, 0.94998800));
srcvs.push(vec3(0.45172160, 0.96262621, 0.55725288));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(-0.28352692, 1.49419546, 0.30139166));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.71457517, -1.16754162, -0.39226028));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.71457517, -1.16754162, -0.39226028));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.68394374, -1.58198213, 0.09356415));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(-0.66773933, 0.97130727, 1.36673247));
srcvs.push(vec3(-0.74303644, 0.56439000, 1.43410301));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(-0.97058123, 0.60075593, 0.79372501));
srcvs.push(vec3(0.03426686, -1.95561516, -2.17714095));
srcvs.push(vec3(-0.00509164, -1.69807314, -2.35717058));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(-0.01635427, -2.11142563, -1.65324878));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(0.59617120, -2.12005376, -1.47073066));
srcvs.push(vec3(0.40893027, 0.41416430, -1.54908955));
srcvs.push(vec3(0.00140146, 0.19727355, -1.76153409));
srcvs.push(vec3(0.31417664, 0.63615524, -1.03920853));
srcvs.push(vec3(0.40893027, 0.41416430, -1.54908955));
srcvs.push(vec3(0.31417664, 0.63615524, -1.03920853));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(-0.74303644, 0.56439000, 1.43410301));
srcvs.push(vec3(-0.66773933, 0.97130727, 1.36673247));
srcvs.push(vec3(-0.28312057, 1.01872587, 1.51108205));
srcvs.push(vec3(-0.03088078, 0.56870883, 1.53679585));
srcvs.push(vec3(0.36002349, 0.70711100, 1.02795469));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-0.98236793, -0.65795451, -1.09911620));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.98236793, -0.65795451, -1.09911620));
srcvs.push(vec3(-0.91908896, -0.99343717, -1.84139299));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-1.46902227, 0.82672226, -0.81181812));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-1.02498126, 0.71546918, -0.40289181));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-0.95298177, 1.18105065, 0.03804242));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.03088078, 0.56870883, 1.53679585));
srcvs.push(vec3(-0.74303644, 0.56439000, 1.43410301));
srcvs.push(vec3(-0.70818859, 0.40634876, 1.15907573));
srcvs.push(vec3(-0.74303644, 0.56439000, 1.43410301));
srcvs.push(vec3(-0.03088078, 0.56870883, 1.53679585));
srcvs.push(vec3(-0.28312057, 1.01872587, 1.51108205));
srcvs.push(vec3(0.31417664, 0.63615524, -1.03920853));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(0.31417664, 0.63615524, -1.03920853));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(0.72088253, -0.90636342, -2.25152778));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.91196298, -0.92513513, -1.84269225));
srcvs.push(vec3(0.69915956, -1.44884991, -2.23491549));
srcvs.push(vec3(0.92408955, -1.31708645, -1.62585842));
srcvs.push(vec3(0.84333318, -1.86380708, -1.85805022));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.23540824, -1.10005450, -0.07362595));
srcvs.push(vec3(0.24162311, -1.53484857, 0.27559280));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(0.71457517, -1.16754162, -0.39226028));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(-1.51289153, 1.28678166, -0.61769259));
srcvs.push(vec3(-1.81036090, 0.78890043, -0.79297405));
srcvs.push(vec3(-1.22564506, 0.90621328, -0.30643627));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-1.46902227, 0.82672226, -0.81181812));
srcvs.push(vec3(-1.38582265, 1.28896832, -0.74174159));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.97262102, -1.89291000, -0.22872240));
srcvs.push(vec3(-0.62334919, -2.00304603, 0.16331304));
srcvs.push(vec3(-0.96078610, -1.99800372, 0.11953522));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.24162311, -1.53484857, 0.27559280));
srcvs.push(vec3(0.41238310, -2.02819609, 0.52147024));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(0.71457517, -1.16754162, -0.39226028));
srcvs.push(vec3(0.68394374, -1.58198213, 0.09356415));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(0.45172160, 0.96262621, 0.55725288));
srcvs.push(vec3(0.50903922, 1.26869547, 0.25874054));
srcvs.push(vec3(-0.51201182, -0.35609972, 0.22819194));
srcvs.push(vec3(-0.24862897, -0.29488694, 1.00674784));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(-0.29388520, 0.04746069, 1.26545810));
srcvs.push(vec3(-0.69944590, 0.42840051, 0.86066228));
srcvs.push(vec3(-0.95298177, 1.18105065, 0.03804242));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-1.12227535, 1.49694454, -0.27781769));
srcvs.push(vec3(-1.12377083, 1.21871948, 0.01750937));
srcvs.push(vec3(-1.51289153, 1.28678166, -0.61769259));
srcvs.push(vec3(-1.22564506, 0.90621328, -0.30643627));
srcvs.push(vec3(0.24162311, -1.53484857, 0.27559280));
srcvs.push(vec3(0.23540824, -1.10005450, -0.07362595));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(0.11633212, -2.02507138, 0.48650628));
srcvs.push(vec3(0.47633260, -1.98824358, 0.03172789));
srcvs.push(vec3(0.41238310, -2.02819609, 0.52147024));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(0.78980869, 0.72425264, -0.06078674));
srcvs.push(vec3(1.10346448, 0.72210902, 0.01983075));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.78980869, 0.72425264, -0.06078674));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.40941765, -1.95035767, 0.05087828));
srcvs.push(vec3(-0.59554374, -1.85461258, 0.16984459));
srcvs.push(vec3(-0.29748046, -1.24175548, 0.28712138));
srcvs.push(vec3(-0.50596475, -1.65785360, 0.35107004));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-1.10154914, 0.52438116, -0.22028833));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-1.59330499, 0.59575927, -0.69772893));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-1.10154914, 0.52438116, -0.22028833));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(0.71457517, -1.16754162, -0.39226028));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(0.77892833, -1.28651332, -0.63426119));
srcvs.push(vec3(0.71457517, -1.16754162, -0.39226028));
srcvs.push(vec3(0.77892833, -1.28651332, -0.63426119));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.78980869, 0.72425264, -0.06078674));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(1.32066249, 0.90208375, -0.39823618));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(0.50903922, 1.26869547, 0.25874054));
srcvs.push(vec3(-0.03228504, -0.38848802, 0.51590317));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(-0.24862897, -0.29488694, 1.00674784));
srcvs.push(vec3(-0.03228504, -0.38848802, 0.51590317));
srcvs.push(vec3(-1.11301767, -1.24734413, -0.94213753));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.87095183, -1.34713232, -1.75541293));
srcvs.push(vec3(-0.97262102, -1.89291000, -0.22872240));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-1.11301767, -1.24734413, -0.94213753));
srcvs.push(vec3(-0.29388520, 0.04746069, 1.26545810));
srcvs.push(vec3(-0.24862897, -0.29488694, 1.00674784));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(-0.29388520, 0.04746069, 1.26545810));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(-0.24862897, -0.29488694, 1.00674784));
srcvs.push(vec3(-0.41741791, 1.10186159, -0.85487222));
srcvs.push(vec3(0.33038178, 1.12679135, -0.76583921));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-0.41741791, 1.10186159, -0.85487222));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-0.94614327, -1.09459888, -0.91893577));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-0.73250705, -1.07259488, -0.39736169));
srcvs.push(vec3(-0.59554374, -1.85461258, 0.16984459));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(0.29685413, -0.04697482, 0.90240973));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(0.98678660, -0.64510232, -1.04427492));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.91196298, -0.92513513, -1.84269225));
srcvs.push(vec3(0.98678660, -0.64510232, -1.04427492));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.29748046, -1.24175548, 0.28712138));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.62744289, -1.02955842, 0.14274758));
srcvs.push(vec3(-0.29748046, -1.24175548, 0.28712138));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.69944590, 0.42840051, 0.86066228));
srcvs.push(vec3(-0.29388520, 0.04746069, 1.26545810));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(-0.03088078, 0.56870883, 1.53679585));
srcvs.push(vec3(-0.70818859, 0.40634876, 1.15907573));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(0.91196298, -0.92513513, -1.84269225));
srcvs.push(vec3(0.92408955, -1.31708645, -1.62585842));
srcvs.push(vec3(0.69915956, -1.44884991, -2.23491549));
srcvs.push(vec3(0.91196298, -0.92513513, -1.84269225));
srcvs.push(vec3(0.94217878, -1.11510944, -0.89974951));
srcvs.push(vec3(0.92408955, -1.31708645, -1.62585842));
srcvs.push(vec3(-1.59330499, 0.59575927, -0.69772893));
srcvs.push(vec3(-1.46902227, 0.82672226, -0.81181812));
srcvs.push(vec3(-1.02498126, 0.71546918, -0.40289181));
srcvs.push(vec3(-1.81036090, 0.78890043, -0.79297405));
srcvs.push(vec3(-1.38582265, 1.28896832, -0.74174159));
srcvs.push(vec3(-1.46902227, 0.82672226, -0.81181812));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(0.49986580, -0.60223430, -0.00780914));
srcvs.push(vec3(-0.03228504, -0.38848802, 0.51590317));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(1.09646439, 1.49849879, -0.34093812));
srcvs.push(vec3(1.32066249, 0.90208375, -0.39823618));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.68883889, 1.29146087, 0.28157663));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(1.10346448, 0.72210902, 0.01983075));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(-0.62334919, -2.00304603, 0.16331304));
srcvs.push(vec3(-0.64066517, -2.06263852, -0.27531105));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(-0.96078610, -1.99800372, 0.11953522));
srcvs.push(vec3(-0.62334919, -2.00304603, 0.16331304));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(-0.73337948, -0.93896925, -2.23115015));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(-0.66773933, 0.97130727, 1.36673247));
srcvs.push(vec3(-0.28312057, 1.01872587, 1.51108205));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(-0.28312057, 1.01872587, 1.51108205));
srcvs.push(vec3(-0.66773933, 0.97130727, 1.36673247));
srcvs.push(vec3(-0.74303644, 0.56439000, 1.43410301));
srcvs.push(vec3(0.98892307, -1.78764653, -1.07957673));
srcvs.push(vec3(1.53534877, -2.01891231, -0.04051253));
srcvs.push(vec3(1.23801815, -2.14796352, -0.14401727));
srcvs.push(vec3(1.37674760, -1.76337337, -0.22236551));
srcvs.push(vec3(0.77892833, -1.28651332, -0.63426119));
srcvs.push(vec3(1.11480116, -1.91482138, -0.14676043));
srcvs.push(vec3(-0.40941765, -1.95035767, 0.05087828));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.41603294, -2.07075476, 0.55613857));
srcvs.push(vec3(-0.40941765, -1.95035767, 0.05087828));
srcvs.push(vec3(-0.05618671, -1.99789118, 0.20766718));
srcvs.push(vec3(-0.01635427, -2.11142563, -1.65324878));
srcvs.push(vec3(-0.23278164, -2.04258251, -2.21060562));
srcvs.push(vec3(0.03426686, -1.95561516, -2.17714095));
srcvs.push(vec3(0.03426686, -1.95561516, -2.17714095));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(-0.01635427, -2.11142563, -1.65324878));
srcvs.push(vec3(-0.96078610, -1.99800372, 0.11953522));
srcvs.push(vec3(-0.97262102, -1.89291000, -0.22872240));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(-0.97262102, -1.89291000, -0.22872240));
srcvs.push(vec3(-0.96078610, -1.99800372, 0.11953522));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(0.41238310, -2.02819609, 0.52147024));
srcvs.push(vec3(0.66695177, -1.00328958, 0.10121630));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.66695177, -1.00328958, 0.10121630));
srcvs.push(vec3(0.68394374, -1.58198213, 0.09356415));
srcvs.push(vec3(0.84336030, -0.74291706, -0.29999131));
srcvs.push(vec3(-0.97058123, 0.60075593, 0.79372501));
srcvs.push(vec3(-0.65887135, 1.00867283, 0.80795753));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(-0.97058123, 0.60075593, 0.79372501));
srcvs.push(vec3(-1.26032245, 0.44093939, 0.59656983));
srcvs.push(vec3(-0.73337948, -0.93896925, -2.23115015));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(-0.46711117, -1.14545941, -2.50080347));
srcvs.push(vec3(-0.77686077, -0.06898501, -1.72750997));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(-0.73337948, -0.93896925, -2.23115015));
srcvs.push(vec3(0.66695177, -1.00328958, 0.10121630));
srcvs.push(vec3(0.41238310, -2.02819609, 0.52147024));
srcvs.push(vec3(0.68394374, -1.58198213, 0.09356415));
srcvs.push(vec3(0.68394374, -1.58198213, 0.09356415));
srcvs.push(vec3(0.41238310, -2.02819609, 0.52147024));
srcvs.push(vec3(0.47633260, -1.98824358, 0.03172789));
srcvs.push(vec3(1.32066249, 0.90208375, -0.39823618));
srcvs.push(vec3(1.10346448, 0.72210902, 0.01983075));
srcvs.push(vec3(0.78980869, 0.72425264, -0.06078674));
srcvs.push(vec3(1.32066249, 0.90208375, -0.39823618));
srcvs.push(vec3(1.62773454, 1.00890374, -0.29020357));
srcvs.push(vec3(1.10346448, 0.72210902, 0.01983075));
srcvs.push(vec3(0.10120493, -1.96457612, 0.14328782));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(0.47633260, -1.98824358, 0.03172789));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(0.68394374, -1.58198213, 0.09356415));
srcvs.push(vec3(0.47633260, -1.98824358, 0.03172789));
srcvs.push(vec3(-0.39419397, 1.45651900, -0.28310892));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.28352692, 1.49419546, 0.30139166));
srcvs.push(vec3(-0.79545766, 1.35280334, 0.32390043));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(-0.28352692, 1.49419546, 0.30139166));
srcvs.push(vec3(0.24162311, -1.53484857, 0.27559280));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(0.10120493, -1.96457612, 0.14328782));
srcvs.push(vec3(0.41238310, -2.02819609, 0.52147024));
srcvs.push(vec3(0.24162311, -1.53484857, 0.27559280));
srcvs.push(vec3(0.11633212, -2.02507138, 0.48650628));
srcvs.push(vec3(-1.12377083, 1.21871948, 0.01750937));
srcvs.push(vec3(-1.12227535, 1.49694454, -0.27781769));
srcvs.push(vec3(-1.51289153, 1.28678166, -0.61769259));
srcvs.push(vec3(-1.12227535, 1.49694454, -0.27781769));
srcvs.push(vec3(-0.86070036, 1.19406247, -0.32612302));
srcvs.push(vec3(-1.38582265, 1.28896832, -0.74174159));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(0.78980869, 0.72425264, -0.06078674));
srcvs.push(vec3(0.76264810, 0.45244959, 0.71570920));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.78980869, 0.72425264, -0.06078674));
srcvs.push(vec3(-1.81036090, 0.78890043, -0.79297405));
srcvs.push(vec3(-1.51289153, 1.28678166, -0.61769259));
srcvs.push(vec3(-1.38582265, 1.28896832, -0.74174159));
srcvs.push(vec3(-1.51289153, 1.28678166, -0.61769259));
srcvs.push(vec3(-1.12227535, 1.49694454, -0.27781769));
srcvs.push(vec3(-1.38582265, 1.28896832, -0.74174159));
srcvs.push(vec3(1.09646439, 1.49849879, -0.34093812));
srcvs.push(vec3(1.62773454, 1.00890374, -0.29020357));
srcvs.push(vec3(1.32066249, 0.90208375, -0.39823618));
srcvs.push(vec3(1.10346448, 0.72210902, 0.01983075));
srcvs.push(vec3(1.62773454, 1.00890374, -0.29020357));
srcvs.push(vec3(0.83677369, 1.21663320, -0.00257054));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(0.83145070, 0.09753659, -0.99039363));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(0.78970950, -0.12389423, -1.73757422));
srcvs.push(vec3(0.62539809, 0.52184575, -0.88962894));
srcvs.push(vec3(0.83145070, 0.09753659, -0.99039363));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(0.70508486, 1.61877000, -0.00618681));
srcvs.push(vec3(1.09646439, 1.49849879, -0.34093812));
srcvs.push(vec3(1.62773454, 1.00890374, -0.29020357));
srcvs.push(vec3(1.18517506, 1.48216879, -0.22554209));
srcvs.push(vec3(0.83677369, 1.21663320, -0.00257054));
srcvs.push(vec3(-0.55280017, -0.62232387, -0.04446756));
srcvs.push(vec3(-0.82006460, -0.26778477, -0.15290530));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.51201182, -0.35609972, 0.22819194));
srcvs.push(vec3(-0.55280017, -0.62232387, -0.04446756));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.85663342, -1.88026869, -1.72510278));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.49483475, -1.97466075, -2.18002057));
srcvs.push(vec3(-0.85663342, -1.88026869, -1.72510278));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.64066517, -2.06263852, -0.27531105));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.61327022, -1.67510891, -0.49859350));
srcvs.push(vec3(-0.77658975, -1.77659916, -0.25085818));
srcvs.push(vec3(-0.64066517, -2.06263852, -0.27531105));
srcvs.push(vec3(1.53534877, -2.01891231, -0.04051253));
srcvs.push(vec3(1.27476584, -1.92248249, 0.24659979));
srcvs.push(vec3(1.23801815, -2.14796352, -0.14401727));
srcvs.push(vec3(1.11480116, -1.91482138, -0.14676043));
srcvs.push(vec3(0.64518839, -1.82776880, -0.88253426));
srcvs.push(vec3(1.23801815, -2.14796352, -0.14401727));
srcvs.push(vec3(0.04242134, 1.47826600, -0.30204144));
srcvs.push(vec3(-0.39419397, 1.45651900, -0.28310892));
srcvs.push(vec3(-0.28352692, 1.49419546, 0.30139166));
srcvs.push(vec3(-0.41741791, 1.10186159, -0.85487222));
srcvs.push(vec3(-0.39419397, 1.45651900, -0.28310892));
srcvs.push(vec3(0.04242134, 1.47826600, -0.30204144));
srcvs.push(vec3(0.66695177, -1.00328958, 0.10121630));
srcvs.push(vec3(0.49986580, -0.60223430, -0.00780914));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.49986580, -0.60223430, -0.00780914));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.36002349, 0.70711100, 1.02795469));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(-0.05697726, 1.04900431, 0.94998800));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(0.36002349, 0.70711100, 1.02795469));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(-0.59554374, -1.85461258, 0.16984459));
srcvs.push(vec3(-0.50596475, -1.65785360, 0.35107004));
srcvs.push(vec3(-0.62744289, -1.02955842, 0.14274758));
srcvs.push(vec3(-0.59554374, -1.85461258, 0.16984459));
srcvs.push(vec3(-0.40941765, -1.95035767, 0.05087828));
srcvs.push(vec3(-0.41603294, -2.07075476, 0.55613857));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.22010368, -1.08901453, -0.06284637));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.22010368, -1.08901453, -0.06284637));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-1.12377083, 1.21871948, 0.01750937));
srcvs.push(vec3(-1.22564506, 0.90621328, -0.30643627));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-1.22564506, 0.90621328, -0.30643627));
srcvs.push(vec3(-1.81036090, 0.78890043, -0.79297405));
srcvs.push(vec3(0.34796083, -2.05469870, -2.21443033));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(0.69915956, -1.44884991, -2.23491549));
srcvs.push(vec3(0.72088253, -0.90636342, -2.25152778));
srcvs.push(vec3(0.40212389, -0.78443038, -2.43019199));
srcvs.push(vec3(0.45558565, -0.25348824, -2.16553926));
srcvs.push(vec3(0.83677369, 1.21663320, -0.00257054));
srcvs.push(vec3(1.18517506, 1.48216879, -0.22554209));
srcvs.push(vec3(0.68883889, 1.29146087, 0.28157663));
srcvs.push(vec3(0.83677369, 1.21663320, -0.00257054));
srcvs.push(vec3(0.68883889, 1.29146087, 0.28157663));
srcvs.push(vec3(1.10346448, 0.72210902, 0.01983075));
srcvs.push(vec3(0.24162311, -1.53484857, 0.27559280));
srcvs.push(vec3(0.10120493, -1.96457612, 0.14328782));
srcvs.push(vec3(0.11633212, -2.02507138, 0.48650628));
srcvs.push(vec3(0.11633212, -2.02507138, 0.48650628));
srcvs.push(vec3(0.10120493, -1.96457612, 0.14328782));
srcvs.push(vec3(0.47633260, -1.98824358, 0.03172789));
srcvs.push(vec3(-0.55280017, -0.62232387, -0.04446756));
srcvs.push(vec3(-0.81751972, -0.70630198, -0.30028021));
srcvs.push(vec3(-0.62744289, -1.02955842, 0.14274758));
srcvs.push(vec3(-0.62744289, -1.02955842, 0.14274758));
srcvs.push(vec3(-0.24252404, -0.73890990, -0.00211336));
srcvs.push(vec3(-0.55280017, -0.62232387, -0.04446756));
srcvs.push(vec3(0.68883889, 1.29146087, 0.28157663));
srcvs.push(vec3(1.18517506, 1.48216879, -0.22554209));
srcvs.push(vec3(0.70508486, 1.61877000, -0.00618681));
srcvs.push(vec3(0.50903922, 1.26869547, 0.25874054));
srcvs.push(vec3(0.70508486, 1.61877000, -0.00618681));
srcvs.push(vec3(0.51659095, 1.26507830, -0.11310288));
srcvs.push(vec3(-0.40941765, -1.95035767, 0.05087828));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.05618671, -1.99789118, 0.20766718));
srcvs.push(vec3(-0.23122465, -1.74626648, 0.47195291));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.50596475, -1.65785360, 0.35107004));
srcvs.push(vec3(1.25710606, -1.50958216, -0.83008992));
srcvs.push(vec3(1.37674760, -1.76337337, -0.22236551));
srcvs.push(vec3(1.53534877, -2.01891231, -0.04051253));
srcvs.push(vec3(1.37674760, -1.76337337, -0.22236551));
srcvs.push(vec3(1.27476584, -1.92248249, 0.24659979));
srcvs.push(vec3(1.53534877, -2.01891231, -0.04051253));
srcvs.push(vec3(-0.39586424, -1.37030518, -0.28937503));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.32752311, -1.91220116, -0.64527416));
srcvs.push(vec3(-0.32752311, -1.91220116, -0.64527416));
srcvs.push(vec3(-0.61776787, -1.84985351, -0.91792124));
srcvs.push(vec3(-0.61679959, -2.10581588, -1.47813665));
srcvs.push(vec3(-0.23122465, -1.74626648, 0.47195291));
srcvs.push(vec3(-0.05618671, -1.99789118, 0.20766718));
srcvs.push(vec3(-0.21299772, -1.56040060, 0.19332242));
srcvs.push(vec3(-0.05618671, -1.99789118, 0.20766718));
srcvs.push(vec3(-0.23122465, -1.74626648, 0.47195291));
srcvs.push(vec3(-0.41603294, -2.07075476, 0.55613857));
srcvs.push(vec3(1.23801815, -2.14796352, -0.14401727));
srcvs.push(vec3(1.27476584, -1.92248249, 0.24659979));
srcvs.push(vec3(1.11480116, -1.91482138, -0.14676043));
srcvs.push(vec3(1.11480116, -1.91482138, -0.14676043));
srcvs.push(vec3(1.27476584, -1.92248249, 0.24659979));
srcvs.push(vec3(1.37674760, -1.76337337, -0.22236551));
srcvs.push(vec3(-1.81036090, 0.78890043, -0.79297405));
srcvs.push(vec3(-1.46902227, 0.82672226, -0.81181812));
srcvs.push(vec3(-1.59330499, 0.59575927, -0.69772893));
srcvs.push(vec3(-1.59330499, 0.59575927, -0.69772893));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-1.81036090, 0.78890043, -0.79297405));
srcvs.push(vec3(0.70508486, 1.61877000, -0.00618681));
srcvs.push(vec3(0.50903922, 1.26869547, 0.25874054));
srcvs.push(vec3(0.68883889, 1.29146087, 0.28157663));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(0.68883889, 1.29146087, 0.28157663));
srcvs.push(vec3(0.50903922, 1.26869547, 0.25874054));
srcvs.push(vec3(-0.41603294, -2.07075476, 0.55613857));
srcvs.push(vec3(-0.23122465, -1.74626648, 0.47195291));
srcvs.push(vec3(-0.50596475, -1.65785360, 0.35107004));
srcvs.push(vec3(-0.50596475, -1.65785360, 0.35107004));
srcvs.push(vec3(-0.59554374, -1.85461258, 0.16984459));
srcvs.push(vec3(-0.41603294, -2.07075476, 0.55613857));
srcvs.push(vec3(-0.91908896, -0.99343717, -1.84139299));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(-0.87095183, -1.34713232, -1.75541293));
srcvs.push(vec3(-1.13989865, -1.54223859, -1.27369701));
srcvs.push(vec3(-0.87095183, -1.34713232, -1.75541293));
srcvs.push(vec3(-0.76057159, -1.63024854, -2.08340048));
srcvs.push(vec3(-0.32752311, -1.91220116, -0.64527416));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(0.01901290, -1.71030116, -0.38433679));
srcvs.push(vec3(0.01901290, -1.71030116, -0.38433679));
srcvs.push(vec3(0.15326243, -2.01348042, -0.66339504));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(-0.82006460, -0.26778477, -0.15290530));
srcvs.push(vec3(-0.55280017, -0.62232387, -0.04446756));
srcvs.push(vec3(-0.51201182, -0.35609972, 0.22819194));
srcvs.push(vec3(-0.74887228, -0.14012312, 0.76215058));
srcvs.push(vec3(-0.82006460, -0.26778477, -0.15290530));
srcvs.push(vec3(-0.51201182, -0.35609972, 0.22819194));
srcvs.push(vec3(0.61053937, 0.67356056, 0.95651161));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(0.45172160, 0.96262621, 0.55725288));
srcvs.push(vec3(0.50903922, 1.26869547, 0.25874054));
srcvs.push(vec3(0.45172160, 0.96262621, 0.55725288));
srcvs.push(vec3(0.69041210, 0.79636800, 0.27516943));
srcvs.push(vec3(0.70508486, 1.61877000, -0.00618681));
srcvs.push(vec3(1.18517506, 1.48216879, -0.22554209));
srcvs.push(vec3(1.09646439, 1.49849879, -0.34093812));
srcvs.push(vec3(1.62773454, 1.00890374, -0.29020357));
srcvs.push(vec3(1.09646439, 1.49849879, -0.34093812));
srcvs.push(vec3(1.18517506, 1.48216879, -0.22554209));
srcvs.push(vec3(0.54488575, -0.20231224, 0.14564201));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(0.79789125, 0.11514516, 0.02471446));
srcvs.push(vec3(0.79789125, 0.11514516, 0.02471446));
srcvs.push(vec3(0.75934243, 0.05539483, -0.42217609));
srcvs.push(vec3(0.79526668, 0.59950417, -0.49384295));
srcvs.push(vec3(0.00140146, 0.19727355, -1.76153409));
srcvs.push(vec3(-0.29791843, 0.24909795, -1.77925229));
srcvs.push(vec3(-0.54861861, 0.59009867, -1.13094162));
srcvs.push(vec3(-0.29791843, 0.24909795, -1.77925229));
srcvs.push(vec3(0.00140146, 0.19727355, -1.76153409));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(-0.70818859, 0.40634876, 1.15907573));
srcvs.push(vec3(-0.97058123, 0.60075593, 0.79372501));
srcvs.push(vec3(-0.69944590, 0.42840051, 0.86066228));
srcvs.push(vec3(-0.70818859, 0.40634876, 1.15907573));
srcvs.push(vec3(-0.69944590, 0.42840051, 0.86066228));
srcvs.push(vec3(0.09636045, 0.42453312, 0.95161443));
srcvs.push(vec3(-1.15873491, 0.63177353, -0.02325280));
srcvs.push(vec3(-0.95298177, 1.18105065, 0.03804242));
srcvs.push(vec3(-1.12377083, 1.21871948, 0.01750937));
srcvs.push(vec3(-1.12377083, 1.21871948, 0.01750937));
srcvs.push(vec3(-0.95298177, 1.18105065, 0.03804242));
srcvs.push(vec3(-1.12227535, 1.49694454, -0.27781769));
srcvs.push(vec3(0.40212389, -0.78443038, -2.43019199));
srcvs.push(vec3(0.72088253, -0.90636342, -2.25152778));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(-0.45977672, -0.50289285, -2.30238580));
srcvs.push(vec3(0.40212389, -0.78443038, -2.43019199));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(0.01901290, -1.71030116, -0.38433679));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(0.23540824, -1.10005450, -0.07362595));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(0.37945213, -1.66180658, -0.07471286));
srcvs.push(vec3(0.69915956, -1.44884991, -2.23491549));
srcvs.push(vec3(0.72088253, -0.90636342, -2.25152778));
srcvs.push(vec3(0.91196298, -0.92513513, -1.84269225));
srcvs.push(vec3(0.37663358, -1.23023402, -2.51123356));
srcvs.push(vec3(0.72088253, -0.90636342, -2.25152778));
srcvs.push(vec3(0.69915956, -1.44884991, -2.23491549));
srcvs.push(vec3(-1.02498126, 0.71546918, -0.40289181));
srcvs.push(vec3(-0.83233106, 0.10947831, -0.94197136));
srcvs.push(vec3(-1.10154914, 0.52438116, -0.22028833));
srcvs.push(vec3(-1.02498126, 0.71546918, -0.40289181));
srcvs.push(vec3(-1.10154914, 0.52438116, -0.22028833));
srcvs.push(vec3(-1.59330499, 0.59575927, -0.69772893));
srcvs.push(vec3(-0.97262102, -1.89291000, -0.22872240));
srcvs.push(vec3(-1.11301767, -1.24734413, -0.94213753));
srcvs.push(vec3(-1.10317695, -1.82914161, -0.55619901));
srcvs.push(vec3(-1.10317695, -1.82914161, -0.55619901));
srcvs.push(vec3(-0.87959867, -2.17173695, -0.26870149));
srcvs.push(vec3(-0.97262102, -1.89291000, -0.22872240));
srcvs.push(vec3(-0.05697726, 1.04900431, 0.94998800));
srcvs.push(vec3(0.24413552, 1.42385542, 0.48176002));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(-0.28312057, 1.01872587, 1.51108205));
srcvs.push(vec3(-0.05697726, 1.04900431, 0.94998800));
srcvs.push(vec3(-0.34482762, 1.15389967, 0.86985158));
srcvs.push(vec3(0.34071514, -1.33688175, -0.25143891));
srcvs.push(vec3(0.23540824, -1.10005450, -0.07362595));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(0.27760532, -0.68448084, 0.01236156));
srcvs.push(vec3(0.00670843, -1.20707786, -0.19340862));
srcvs.push(vec3(0.23540824, -1.10005450, -0.07362595));

    vertices_num = srcvs.length;

    /*
    var normals = [];

    for (let i = 0; i < vertices.length; i+=3 ) {
        let t1 = subtract(vertices[i+1], vertices[i]);
        let t2 = subtract(vertices[i+2], vertices[i]);
        let normal = vec4(normalize(cross(t1, t2)));
        normal = vec3(normal);

        normals.push(normal);
        normals.push(normal);
        normals.push(normal);
    }*/

    gl_help_new_buffer(srcvs,
        [materialAmbient, materialDiffuse, materialSpecular, materialShininess],
        vec4(0.0, 0.0, 0.0, 1.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        []);
    

    srcvs = [];
    srcvs.push(vec3( 10.0, -2.1, -10.0));
    srcvs.push(vec3(-10.0, -2.1, -10.0));
    srcvs.push(vec3( 10.0, -2.1,  10.0));
    srcvs.push(vec3(-10.0, -2.1, -10.0));
    srcvs.push(vec3(-10.0, -2.1,  10.0));
    srcvs.push(vec3( 10.0, -2.1,  10.0));

    let tsts = [];
    tsts.push(vec2(0, 0));
    tsts.push(vec2(0, 1));
    tsts.push(vec2(1, 1));
    tsts.push(vec2(0, 0));
    tsts.push(vec2(1, 1));
    tsts.push(vec2(1, 0));

    gl_help_new_buffer(srcvs,
        [vec4(0.3, 0.9, 0.0, 1.0), vec4(0.2, 0.6, 0.0, 1.0), vec4(0.0, 0.2, 0.0, 1.0), 75],
        vec4(0.0, 0.0, 0.0, 1.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        tsts);

    srcvs = [];
    srcvs.push(vec3(-6.0, -3.0, -20.0));
    srcvs.push(vec3( 0.0,  3.0, -14.0));
    srcvs.push(vec3( 6.0, -3.0, -20.0));
    srcvs.push(vec3(-6.0, -3.0, -20.0));
    srcvs.push(vec3(-6.0, -3.0,  -8.0));
    srcvs.push(vec3( 0.0,  3.0, -14.0));
    srcvs.push(vec3(-6.0, -3.0,  -8.0));
    srcvs.push(vec3( 6.0, -3.0,  -8.0));
    srcvs.push(vec3( 0.0,  3.0, -14.0));
    srcvs.push(vec3( 6.0, -3.0,  -8.0));
    srcvs.push(vec3( 6.0, -3.0, -20.0));
    srcvs.push(vec3( 0.0,  3.0, -14.0));

    gl_help_new_buffer(srcvs,
        [vec4( 0.8, 0.8, 0.0, 1.0 ), vec4( 0.8, 0.8, 0.0, 1.0), vec4( 0.8, 0.8, 0.4, 1.0 ), 10],
        vec4(0.0, 0.0,-8.0, 1.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        []);

    gl_help_load_buffer(gl, program, "vNormal", "vPosition", "vTexcoord");


    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
 

    //configureTexture(new Uint8Array([0, 0, 255, 255, 0, 255, 255, 255, 0, 255, 0, 255, 0, 0, 0, 255]));
    configureTexture(myTexels);
// 用 1x1 个蓝色像素填充纹理
/*gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
              new Uint8Array([0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255]));
*/
file:///C:/Users/pc_klh/Desktop/Graphics/code/self/
// 异步加载图像

var image = new Image();
//image.crossOrigin = '';
image.src = "f-texture.png";

image.onload = function() {
  // 现在图像加载完成，拷贝到纹理中gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image);
    gl.generateMipmap(gl.TEXTURE_2D);
};



    gl.uniform1i(gl.getUniformLocation(program, "u_texture"), 0);



    proMatrixLoc = gl.getUniformLocation( program, "proMatrix" );
    //mdMatrixLoc = gl.getUniformLocation( program, "mdMatrix" );
    //bgMatrixLoc = gl.getUniformLocation( program, "bgMatrix" );

    
    ambientProduct = mult(lightAmbient, materialAmbient);
    diffuseProduct = mult(lightDiffuse, materialDiffuse);
    specularProduct = mult(lightSpecular, materialSpecular);

    /*gl.uniform4fv(gl.getUniformLocation(program, "ambientProduct"),
       flatten(ambientProduct));
    gl.uniform4fv(gl.getUniformLocation(program, "diffuseProduct"),
       flatten(diffuseProduct) );
    gl.uniform4fv(gl.getUniformLocation(program, "specularProduct"),
       flatten(specularProduct) );*/
/*
    canvas.addEventListener("mousedown", function(event){
        let x = 2*event.clientX/canvas.width-1;
        let y = 2*(canvas.height-event.clientY)/canvas.height-1;
        startMotion(x, y);
    });
  
    canvas.addEventListener("mouseup", function(event){
        let x = 2*event.clientX/canvas.width-1;
        let y = 2*(canvas.height-event.clientY)/canvas.height-1;
        stopMotion(x, y);
    });
  
    canvas.addEventListener("mousemove", function(event){
        let x = 2*event.clientX/canvas.width-1;
        let y = 2*(canvas.height-event.clientY)/canvas.height-1;
        mouseMotion(x, y);
    });
*/
    /*document.getElementById( "upButton" ).onclick = function(){
        if (roll_const==0){
            roll_const = 0.01;
        }else if(roll_const==0.01){
            roll_const = 0.1;
        }else roll_const = 1.0;
        document.getElementById( "roll_const" ).innerHTML = "" + roll_const*100;
    }
    document.getElementById( "downButton" ).onclick = function(){
        if (roll_const==1){
            roll_const = 0.1;
        }else if(roll_const==0.1){
            roll_const = 0.01;
        }else roll_const = 0.0;
        document.getElementById( "roll_const" ).innerHTML = "" + roll_const*100;
    }*/

    document.getElementById( "x_coor" ).innerHTML = lightPosition[0];
    document.getElementById( "y_coor" ).innerHTML = lightPosition[1];
    document.getElementById( "z_coor" ).innerHTML = lightPosition[2];

    document.getElementById( "x_up" ).onclick = function(){
        lightPosition[0]+=1;
        document.getElementById( "x_coor" ).innerHTML = lightPosition[0];
        document.getElementById("light_position_x").value = lightPosition[0];
    }
    document.getElementById( "y_up" ).onclick = function(){
        lightPosition[1]+=1;
        document.getElementById( "y_coor" ).innerHTML = lightPosition[1];
        document.getElementById("light_position_y").value = lightPosition[1];
    }
    document.getElementById( "z_up" ).onclick = function(){
        lightPosition[2]+=1;
        document.getElementById( "z_coor" ).innerHTML = lightPosition[2];
        document.getElementById("light_position_z").value = lightPosition[2];
    }

    document.getElementById( "x_down" ).onclick = function(){
        lightPosition[0]-=1;
        document.getElementById( "x_coor" ).innerHTML = lightPosition[0];
        document.getElementById("light_position_x").value = lightPosition[0];
    }
    document.getElementById( "y_down" ).onclick = function(){
        lightPosition[1]-=1;
        document.getElementById( "y_coor" ).innerHTML = lightPosition[1];
        document.getElementById("light_position_y").value = lightPosition[1];
    }
    document.getElementById( "z_down" ).onclick = function(){
        lightPosition[2]-=1;
        document.getElementById( "z_coor" ).innerHTML = lightPosition[2];
        document.getElementById("light_position_z").value = lightPosition[2];
    }

    document.getElementById( "gl-canvas" ).onmousewheel = function(e) {
        e = e || window.event;
	    if(e.wheelDelta){
            if (e.wheelDelta){
                let delta = -e.wheelDelta/50.0;
                if (delta>0 && camera_degree+delta<90) camera_degree+=delta;
                if (delta<0 && camera_degree+delta>45) camera_degree+=delta;
            }
        }
    };
    
    document.getElementById("light_settings").onclick = function(){
        let x = parseFloat(document.getElementById("light_position_x").value);
        let y = parseFloat(document.getElementById("light_position_y").value);
        let z = parseFloat(document.getElementById("light_position_z").value);
        document.getElementById( "x_coor" ).innerHTML = x;
        document.getElementById( "y_coor" ).innerHTML = y;
        document.getElementById( "z_coor" ).innerHTML = z;
        lightPosition = vec4(x, y, z, 0.0);
        let r = parseFloat(document.getElementById("light_ambient_r").value);
        let g = parseFloat(document.getElementById("light_ambient_g").value);
        let b = parseFloat(document.getElementById("light_ambient_b").value);
        lightAmbient = vec4(r, g, b, 1.0 );
        r = parseFloat(document.getElementById("light_diffuse_r").value);
        g = parseFloat(document.getElementById("light_diffuse_g").value);
        b = parseFloat(document.getElementById("light_diffuse_b").value);
        lightDiffuse = vec4(r, g, b, 1.0 );
        r = parseFloat(document.getElementById("light_specular_r").value);
        g = parseFloat(document.getElementById("light_specular_g").value);
        b = parseFloat(document.getElementById("light_specular_b").value);
        lightSpecular = vec4(r, g, b, 1.0 );

    }

    render();
};

function m_v( u, v){
    var result = [];

    for ( var i = 0; i < 4; ++i ) {
        var sum = 0.0;
        for ( var k = 0; k < 4; ++k ) {
            sum += u[i][k] * v[k];
        }
        result.push( sum );
    }

    return result;

}

function cutten( v){
    let m = 1;
    if (v[3]!=0) m = v[3];
    return vec3(v[0]/m, v[1]/m, v[2]/m);
}


var trackingMouse = false;
var trackballMove = false;
var startX = 0;
var startY = 0;
var curx = 0;
var cury = 0;
var lastPos;
var roll_axis = vec3();
var max_roll_speed = 2.0;

function render() {


    gl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    

    gl.uniform4fv(gl.getUniformLocation(program, "lightPosition"),
       flatten(lightPosition) );


    let fovy = camera_degree;
    let aspect = canvas.width/canvas.height;
    proMatrix = perspective(fovy, aspect, 1.0, 100.0);

    let cameraMatrix = mult(rotate(cameraFai, vec3(1.0, 0.0, 0.0)), rotate(cameraTheta, vec3(0.0, 1.0, 0.0)));

    proMatrix = mult(proMatrix, cameraMatrix);

    proMatrix = mult(proMatrix, translate(invCameraPosition));
    
    let eyePosition = m_v(translate(vec3(-invCameraPosition[0], -invCameraPosition[1], -invCameraPosition[2])),
        vec4(0.0, 0.0, 0.0, 1.0)
        );

    /*
    console.log(invCameraPosition);
    console.log(cameraMatrix);
    console.log(eyePosition);
    */

    gl.uniform4fv(gl.getUniformLocation( program, "eyePosition" ), eyePosition);

    gl.uniformMatrix4fv( proMatrixLoc, false, flatten(proMatrix) );

    //gl.uniformMatrix4fv(mdMatrixLoc, false, flatten(mdMatrix));
    //gl.uniformMatrix4fv(bgMatrixLoc, false, flatten(bgMatrix));

    gl.uniformMatrix4fv(gl.getUniformLocation( program, "mvMatrix" ), false, flatten(mult(bgMatrix, mdMatrix)));

    //gl.drawArrays( gl.TRIANGLES, 0, vertices_num);
    gl_help_draw(gl, program,
        1,
        [lightAmbient, lightDiffuse, lightSpecular]);

    gl_help_draw(gl, program,
        2,
        [lightAmbient, lightDiffuse, lightSpecular]);

    gl_help_draw(gl, program,
        3,
        [lightAmbient, lightDiffuse, lightSpecular]);

    window.requestAnimFrame(render);

    if (trackballMove && roll_speed>0){
        if (!(roll_axis[0]==0.0 && roll_axis[1]==0.0 && roll_axis[2]==0.0)){
            rotate_by(roll_speed, vec4(roll_axis[0], roll_axis[1], roll_axis[2], 0.0));
            roll_speed *= 1-roll_const;
        }
    }

}

function move_by(d){

    let direction = m_v(mdMatrix, d);
    mdMatrix = mult(translate(cutten(direction)) , mdMatrix);
}

function spin_by(angle, dv){

    let R = mat4();
    let ctm = mat4();

    let center = m_v(mdMatrix, vec4(0.0, 0.0, 0.0, 1.0));
    let direction = m_v(mdMatrix, dv);


    R = mult(R, rotate(angle, cutten(direction)) );

    ctm = mult(ctm, translate(cutten(center)));
    ctm = mult(ctm, R);
    ctm = mult(ctm, translate(negate(cutten(center))));

    mdMatrix = mult(ctm, mdMatrix);

}

function drug_by(d){
    bgMatrix = mult(translate(cutten(d)), bgMatrix);
}

function rotate_by(angle, dv){

    let R = mat4();
    let ctm = mat4();

    R = mult(R, rotate(angle, cutten(dv)) );

    ctm = mult(ctm, R);

    bgMatrix = mult(ctm, bgMatrix);

}


window.addEventListener("keydown", function() {
    console.log(event.keyCode);

    var theta;

    switch (event.keyCode) {
        //self
        case 87:
            move_by(vec4(0.0, 0.0, 0.1, 0.0));
            break;
        case 83:
            move_by(vec4(0.0, 0.0, -0.1, 0.0));
            break;
        case 65:
            spin_by(2.0, vec4(0.0, 1.0, 0.0, 0.0));
            break;
        case 68:
            spin_by(2.0, vec4(0.0, -1.0, 0.0, 0.0));
            break;
        case 90:
            spin_by(2.0, vec4(1.0, 0.0, 0.0, 0.0));
            break;
        case 67:
            spin_by(2.0, vec4(-1.0, 0.0, 0.0, 0.0));
            break;
        case 81:
            spin_by(2.0, vec4(0.0, 0.0, 1.0, 0.0));
            break;
        case 69:
            spin_by(2.0, vec4(0.0, 0.0, -1.0, 0.0));
            break;
        //coord
        //drug
        case 37:
            drug_by(vec4(-0.2, 0.0, 0.0, 0.0));
            break;
        case 39:
            drug_by(vec4(0.2, 0.0, 0.0, 0.0));
            break;
        case 38:
            drug_by(vec4(0.0, 0.2, 0.0, 0.0));
            break;
        case 40:
            drug_by(vec4(0.0, -0.2, 0.0, 0.0));
            break;
        //rotate
        case 73:
            rotate_by(2.0, vec4(1.0, 0.0, 0.0, 0.0));
            break;
        case 79:
            rotate_by(2.0, vec4(0.0, 1.0, 0.0, 0.0));
            break;
        case 80:
            rotate_by(2.0, vec4(0.0, 0.0, 1.0, 0.0));
            break;
        
        case 74:
            rotate_by(2.0, vec4(-1.0, 0.0, 0.0, 0.0));
            break;
        case 75:
            rotate_by(2.0, vec4(0.0, -1.0, 0.0, 0.0));
            break;
        case 76:
            rotate_by(2.0, vec4(0.0, 0.0, -1.0, 0.0));
            break;
        //vr



        case 97:
            theta = cameraTheta+135;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        case 98:
            theta= cameraTheta+90;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        case 99:
            theta= cameraTheta+45;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        case 100:
            theta= cameraTheta+180;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        
        case 102:
            theta= cameraTheta;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        case 103:
            theta = cameraTheta-135;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        case 104:
            theta= cameraTheta-90;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;
        case 105:
            theta = cameraTheta-45;
            invCameraPosition[0] -= 0.2*Math.cos(theta*Math.PI/180);
            invCameraPosition[2] -= 0.2*Math.sin(theta*Math.PI/180);
            break;

        case 107:
            invCameraPosition[1] -= 0.1;
            break;
        case 109:
            invCameraPosition[1] += 0.1;
            break;

        case 86:
            cameraTheta -= 1.0;
            break;
        case 66:
            cameraTheta += 1.0;
            break;

        
        case 78:
            cameraFai += 0.5;
            break;
        case 77:
            cameraFai -= 0.5;
            break;

    }
});


function trackballView(x, y){
    var d, a;
    var v = [];

    v[0] = x;
    v[1] = y;

    d = v[0]*v[0] + v[1]*v[1];
    if (d < 1.0)
      v[2] = Math.sqrt(1.0 - d);
    else {
      v[2] = 0.0;
      a = 1.0 /  Math.sqrt(d);
      v[0] *= a;
      v[1] *= a;
    }
    return v;
}
/*
function mouseMotion( x,  y){

    var curPos = trackballView(x, y);
    if(trackingMouse) {
        let dx = curPos[0] - lastPos[0];
        let dy = curPos[1] - lastPos[1];
        let dz = curPos[2] - lastPos[2];

        if (dx || dy || dz) {

            roll_axis[0] = lastPos[1]*curPos[2] - lastPos[2]*curPos[1];
            roll_axis[1] = lastPos[2]*curPos[0] - lastPos[0]*curPos[2];
            roll_axis[2] = lastPos[0]*curPos[1] - lastPos[1]*curPos[0];
            roll_axis = normalize(roll_axis);
            trackballMove = true;
            roll_speed = max_roll_speed;

            lastPos[0] = curPos[0];
            lastPos[1] = curPos[1];
            lastPos[2] = curPos[2];
        }
    }
    
    //render(); 
}

function startMotion( x,  y){
    trackingMouse = true;
    startX = x;
    startY = y;
    curx = x;
    cury = y;

    lastPos = trackballView(x, y);
    trackballMove=true;
    roll_speed = max_roll_speed;
}

function stopMotion( x,  y){
    trackingMouse = false;
    if (startX == x && startY == y) {
        trackballMove = false;
    }
}
*/